-- ============================================
-- Supabase schema: multi-tenant blog (public)
-- ============================================
-- Note: Assumes Supabase default schemas and auth are enabled
-- All foreign keys referencing auth.users(id)

-- 블로그(테넌트) 마스터 테이블
CREATE TABLE IF NOT EXISTS public.blogs (
  id        BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name      TEXT NOT NULL,
  domain    TEXT NOT NULL UNIQUE,
  owner_id  UUID REFERENCES auth.users(id),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE public.blogs IS '블로그(테넌트) 정보';

-- 사용자 부가 정보 (auth.users 와 1:1)
CREATE TABLE IF NOT EXISTS public.user_profiles (
  user_id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  nickname VARCHAR(50) NOT NULL UNIQUE,
  bio TEXT,
  profile_image_url VARCHAR(255)
);
COMMENT ON TABLE public.user_profiles IS '사용자 프로필 정보';

-- 블로그별 역할
CREATE TABLE IF NOT EXISTS public.roles (
  id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  blog_id BIGINT NOT NULL REFERENCES public.blogs(id) ON DELETE CASCADE,
  name    VARCHAR(50) NOT NULL,
  UNIQUE(blog_id, name)
);
COMMENT ON TABLE public.roles IS '블로그별 역할';

-- 전역 권한 카탈로그
CREATE TABLE IF NOT EXISTS public.permissions (
  id   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(100) NOT NULL UNIQUE
);
COMMENT ON TABLE public.permissions IS '권한명 (e.g., create_post, delete_comment)';

-- 사용자-역할 매핑 (블로그 컨텍스트 포함)
CREATE TABLE IF NOT EXISTS public.user_roles (
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  role_id BIGINT NOT NULL REFERENCES public.roles(id) ON DELETE CASCADE,
  blog_id BIGINT NOT NULL REFERENCES public.blogs(id) ON DELETE CASCADE,
  PRIMARY KEY (user_id, role_id, blog_id)
);

-- 역할-권한 매핑
CREATE TABLE IF NOT EXISTS public.role_permissions (
  role_id BIGINT NOT NULL REFERENCES public.roles(id) ON DELETE CASCADE,
  permission_id INT NOT NULL REFERENCES public.permissions(id) ON DELETE CASCADE,
  PRIMARY KEY (role_id, permission_id)
);

-- 게시글
CREATE TABLE IF NOT EXISTS public.posts (
  id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  blog_id     BIGINT NOT NULL REFERENCES public.blogs(id) ON DELETE CASCADE,
  author_id   UUID   NOT NULL REFERENCES auth.users(id),
  title       TEXT   NOT NULL,
  slug        TEXT   NOT NULL,
  content     TEXT   NOT NULL,
  excerpt     TEXT,
  status      TEXT   NOT NULL DEFAULT 'DRAFT',     -- e.g., DRAFT, PUBLISHED
  visibility  TEXT   NOT NULL DEFAULT 'PUBLIC',    -- e.g., PUBLIC, PRIVATE
  view_count  BIGINT NOT NULL DEFAULT 0,
  published_at TIMESTAMPTZ,
  created_at   TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at   TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  UNIQUE (blog_id, slug)
);
COMMENT ON TABLE public.posts IS '블로그 게시글';

-- 댓글
CREATE TABLE IF NOT EXISTS public.comments (
  id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  blog_id    BIGINT NOT NULL REFERENCES public.blogs(id) ON DELETE CASCADE,
  post_id    BIGINT NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
  author_id  UUID   NOT NULL REFERENCES auth.users(id),
  parent_id  BIGINT REFERENCES public.comments(id) ON DELETE CASCADE,
  content    TEXT   NOT NULL,
  status     TEXT   NOT NULL DEFAULT 'VISIBLE',
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE public.comments IS '게시글 댓글';

-- 카테고리
CREATE TABLE IF NOT EXISTS public.categories (
  id        BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  blog_id   BIGINT NOT NULL REFERENCES public.blogs(id) ON DELETE CASCADE,
  parent_id BIGINT REFERENCES public.categories(id) ON DELETE SET NULL,
  name      TEXT NOT NULL,
  slug      TEXT NOT NULL,
  UNIQUE (blog_id, slug)
);
COMMENT ON TABLE public.categories IS '글 분류 카테고리';

-- 첨부파일 메타데이터 (Storage는 별도)
CREATE TABLE IF NOT EXISTS public.attachments (
  id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  blog_id      BIGINT NOT NULL REFERENCES public.blogs(id) ON DELETE CASCADE,
  post_id      BIGINT REFERENCES public.posts(id) ON DELETE SET NULL,
  uploader_id  UUID  NOT NULL REFERENCES auth.users(id),
  file_name    TEXT  NOT NULL,
  file_path    TEXT  NOT NULL UNIQUE,
  file_type    TEXT,
  file_size_kb BIGINT,
  created_at   TIMESTAMPTZ NOT NULL DEFAULT NOW()
);


