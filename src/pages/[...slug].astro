---
import { type CollectionEntry, getCollection } from 'astro:content';
import BlogPost from '../layouts/BlogPost.astro';

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	const paths = await Promise.all(
		posts.map(async (post: CollectionEntry<'blog'>) => {
			// Use explicit slug if provided, otherwise generate from the file path
			const slug = post.data.slug || post.id.replace(/\.[^/.]+$/, '');
			// console.log(`Generated slug: ${slug}`); // 슬러그 생성 확인용 (필요시 제거)
			// post.render()는 getStaticPaths에서 호출하지 않습니다.
			return {
				params: { slug },
				// 페이지 컴포넌트에서 필요한 데이터만 props로 전달합니다.
				// Content는 Astro가 자동으로 제공합니다.
				props: { post }, // post 객체 전체를 props로 전달하여 render 속성에 접근
			};
		})
	);
	return paths;
}

// 이 페이지 자체의 props 타입
// Astro가 자동으로 제공하는 render 속성을 포함합니다.
type PageProps = {
	post: CollectionEntry<'blog'>; // post 객체 전체를 받도록 타입 정의
};

const { post } = Astro.props; // Astro에서 post 객체를 받음
const { Content } = await post.render(); // post.render()를 호출하여 Content를 얻음
---

<BlogPost data={post.data}> // post.data 객체를 props로 전달
	<Content /> // 렌더링된 내용을 슬롯으로 전달
</BlogPost> 