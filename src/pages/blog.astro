---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import BlogCard from '../components/BlogCard.astro';
import ImprovedTagFilter from '../components/ImprovedTagFilter.astro';
import { getCollection, type CollectionEntry } from 'astro:content';

// Helper function to get a valid timestamp or fallback
function getValidTimestamp(date: Date | null | undefined): number {
    if (!date) return 0;
    const timestamp = date.getTime();
    return isNaN(timestamp) ? 0 : timestamp;
}

const allPosts = (await getCollection('blog'))
    .filter((post: CollectionEntry<'blog'>) => post.data.publish)
    .sort((a: CollectionEntry<'blog'>, b: CollectionEntry<'blog'>) => {
        const dateA = getValidTimestamp(a.data.created_date);
        const dateB = getValidTimestamp(b.data.created_date);
        return dateB - dateA;
    });

const allTags: string[] = [...new Set(allPosts.flatMap((post: CollectionEntry<'blog'>) => (post.data.tags ?? []) as string[]))];
---

<!doctype html>
<html lang="en">
    <head>
        <BaseHead title="Blog - Ideas & Insights" description="Explore our collection of articles, ideas, insights, and everything in between." />
    </head>
    <body class="min-h-screen flex flex-col m-0" data-all-tags={JSON.stringify(allTags)}>
        <Header />
        <main class="flex-1 w-full max-w-screen-lg mx-auto p-8 flex flex-col">
            <!-- 개선된 태그 관리 시스템 -->
            <section class="mb-8">
                <ImprovedTagFilter allTags={allTags} />
            </section>

            {allPosts.length > 0 ? (
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 flex-1 mb-8" id="blog-posts-grid">
                    {allPosts.map((post: CollectionEntry<'blog'>) => (
                        <BlogCard
                            title={post.data.title}
                            description={post.data.description ?? undefined}
                            date={post.data.created_date ?? undefined}
                            slug={post.data.slug ?? post.id.replace(/\.[^/.]+$/, '')}
                            dataTags={post.data.tags ? post.data.tags.join(',') : ''}
                            dataTitle={post.data.title}
                            dataDescription={post.data.description ?? ''}
                        />
                    ))}
                </div>
            ) : (
                <div class="text-center p-16 text-text-default text-lg flex-1 md:p-12 md:text-base dark:text-surface-light">
                    No posts found. Check back soon!
                </div>
            )}
        </main>
        <Footer />
        <script is:inline>
            document.addEventListener('DOMContentLoaded', () => {
                const searchInput = document.getElementById('post-search');
                const tagFilterContainer = document.getElementById('tag-filter-container');
                const blogPostsGrid = document.getElementById('blog-posts-grid');
                const showMoreButton = document.getElementById('show-more-tags');
                const moreTags = document.getElementById('more-tags');
                const resultsInfo = document.getElementById('results-info');

                if (!blogPostsGrid) {
                    console.warn('Blog posts grid not found');
                    return;
                }

                const allBlogCards = Array.from(blogPostsGrid.children);
                let currentSearchTerm = '';
                let currentSelectedTag = 'all';

                // 필터링 함수
                const filterPosts = () => {
                    let visibleCount = 0;
                    
                    allBlogCards.forEach(card => {
                        const cardTitle = (card.dataset.title || '').toLowerCase();
                        const cardTags = (card.dataset.tags || '').toLowerCase().split(',');
                        const cardDescription = (card.dataset.description || '').toLowerCase();

                        const matchesSearch = currentSearchTerm === '' || 
                            cardTitle.includes(currentSearchTerm) || 
                            cardDescription.includes(currentSearchTerm);
                        
                        const matchesTag = currentSelectedTag === 'all' || 
                            cardTags.includes(currentSelectedTag);

                        if (matchesSearch && matchesTag) {
                            card.style.display = 'block';
                            visibleCount++;
                        } else {
                            card.style.display = 'none';
                        }
                    });

                    // 결과 정보 업데이트
                    if (resultsInfo) {
                        const searchText = currentSearchTerm ? ` "${currentSearchTerm}"` : '';
                        const tagText = currentSelectedTag !== 'all' ? ` #${currentSelectedTag}` : '';
                        resultsInfo.innerHTML = `
                            <div class="flex items-center gap-2">
                                <svg class="w-4 h-4 text-brand-secondary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                </svg>
                                <span>${searchText}${tagText} 검색 결과: <strong>${visibleCount}개</strong> / 전체 ${allBlogCards.length}개</span>
                            </div>
                        `;
                    }
                };

                // 검색 이벤트
                if (searchInput) {
                    searchInput.addEventListener('input', (event) => {
                        currentSearchTerm = event.target.value.toLowerCase().trim();
                        filterPosts();
                    });
                }

                // 태그 클릭 이벤트
                if (tagFilterContainer) {
                    tagFilterContainer.addEventListener('click', (event) => {
                        const targetLink = event.target.closest('a[data-tag]');
                        
                        if (targetLink) {
                            event.preventDefault();
                            
                            // 이전 활성 태그 스타일 제거
                            document.querySelectorAll('.current-tag').forEach(tag => {
                                tag.classList.remove('current-tag', 'bg-brand-secondary', 'text-white');
                                tag.classList.add('bg-gray-100', 'text-gray-700');
                            });
                            
                            // 새 활성 태그 스타일 적용
                            targetLink.classList.remove('bg-gray-100', 'text-gray-700');
                            targetLink.classList.add('current-tag', 'bg-brand-secondary', 'text-white');
                            
                            currentSelectedTag = targetLink.dataset.tag;
                            filterPosts();
                        }
                    });
                }

                // 더보기 버튼 이벤트
                if (showMoreButton && moreTags) {
                    showMoreButton.addEventListener('click', () => {
                        const isHidden = moreTags.classList.contains('hidden');
                        
                        if (isHidden) {
                            moreTags.classList.remove('hidden');
                            moreTags.classList.add('show');
                            showMoreButton.querySelector('span').textContent = '접기';
                            showMoreButton.querySelector('svg').style.transform = 'rotate(180deg)';
                        } else {
                            moreTags.classList.remove('show');
                            moreTags.classList.add('hidden');
                            const hiddenCount = showMoreButton.querySelector('span').textContent.match(/\d+/)[0];
                            showMoreButton.querySelector('span').textContent = `+${hiddenCount}개 더보기`;
                            showMoreButton.querySelector('svg').style.transform = 'rotate(0deg)';
                        }
                    });
                }

                // 숨겨진 태그들도 클릭 이벤트 적용
                if (moreTags) {
                    moreTags.addEventListener('click', (event) => {
                        const targetLink = event.target.closest('a[data-tag]');
                        
                        if (targetLink) {
                            event.preventDefault();
                            
                            // 모든 활성 태그 스타일 제거
                            document.querySelectorAll('.current-tag').forEach(tag => {
                                tag.classList.remove('current-tag', 'bg-brand-secondary', 'text-white');
                            });
                            
                            targetLink.classList.add('current-tag', 'bg-brand-secondary', 'text-white');
                            
                            currentSelectedTag = targetLink.dataset.tag;
                            filterPosts();
                        }
                    });
                }

                // 초기 필터링
                filterPosts();
            });
        </script>
    </body>
</html> 