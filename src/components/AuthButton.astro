---
// 서버 사이드에서는 인증 상태 확인 불가능하므로 클라이언트에서 처리
---

<div id="auth-button-container" class="flex items-center space-x-4">
  <div id="loading-auth" class="text-sm text-text-light">로딩 중...</div>
  <div id="logged-out" class="hidden">
    <button 
      id="login-btn" 
      class="bg-accent text-text px-4 py-2 rounded-lg font-medium hover:bg-accent-coral transition-colors duration-200 shadow-sm"
    >
      로그인
    </button>
  </div>
  <div id="logged-in" class="hidden flex items-center space-x-3">
    <span id="user-email" class="text-sm text-text font-medium"></span>
    <button 
      id="logout-btn" 
      class="bg-accent-coral text-white px-4 py-2 rounded-lg font-medium hover:bg-error transition-colors duration-200 shadow-sm"
    >
      로그아웃
    </button>
  </div>
</div>

<script>
  import { supabase, signInWithGoogle, signOut, getUser } from '../lib/supabase';
  import { showToast } from '../scripts/toast';

  const loadingElement = document.getElementById('loading-auth');
  const loggedOutElement = document.getElementById('logged-out');
  const loggedInElement = document.getElementById('logged-in');
  const userEmailElement = document.getElementById('user-email');
  const loginBtn = document.getElementById('login-btn');
  const logoutBtn = document.getElementById('logout-btn');

  // 인증 상태 확인 및 UI 업데이트
  async function updateAuthUI() {
    try {
      const user = await getUser();
      
      if (loadingElement) loadingElement.classList.add('hidden');
      
      if (user) {
        // 로그인된 상태
        if (loggedOutElement) loggedOutElement.classList.add('hidden');
        if (loggedInElement) loggedInElement.classList.remove('hidden');
        if (userEmailElement) userEmailElement.textContent = user.email || '';
      } else {
        // 로그아웃된 상태
        if (loggedInElement) loggedInElement.classList.add('hidden');
        if (loggedOutElement) loggedOutElement.classList.remove('hidden');
      }
    } catch (error) {
      console.error('인증 상태 확인 오류:', error);
      showToast('인증 상태를 확인할 수 없습니다.', { type: 'error' });
      if (loadingElement) loadingElement.classList.add('hidden');
      if (loggedOutElement) loggedOutElement.classList.remove('hidden');
    }
  }

  // 로그인 버튼 클릭
  if (loginBtn && loginBtn instanceof HTMLButtonElement) {
    loginBtn.addEventListener('click', async () => {
      try {
        loginBtn.disabled = true;
        loginBtn.textContent = '로그인 중...';
        
        const { error } = await signInWithGoogle();
        if (error) {
          console.error('로그인 오류:', error);
          showToast('로그인에 실패했습니다. 다시 시도해주세요.', { type: 'error' });
        }
      } catch (error) {
        console.error('로그인 오류:', error);
        showToast('로그인 중 오류가 발생했습니다.', { type: 'error' });
      } finally {
        loginBtn.disabled = false;
        loginBtn.textContent = '로그인';
      }
    });
  }

  // 로그아웃 버튼 클릭
  if (logoutBtn && logoutBtn instanceof HTMLButtonElement) {
    logoutBtn.addEventListener('click', async () => {
      try {
        logoutBtn.disabled = true;
        logoutBtn.textContent = '로그아웃 중...';
        
        const { error } = await signOut();
        if (error) {
          console.error('로그아웃 오류:', error);
          showToast('로그아웃에 실패했습니다. 다시 시도해주세요.', { type: 'error' });
        } else {
          showToast('성공적으로 로그아웃되었습니다.', { type: 'success' });
          // 로그아웃 성공 시 페이지 새로고침
          setTimeout(() => window.location.reload(), 1000);
        }
      } catch (error) {
        console.error('로그아웃 오류:', error);
        showToast('로그아웃 중 오류가 발생했습니다.', { type: 'error' });
      } finally {
        logoutBtn.disabled = false;
        logoutBtn.textContent = '로그아웃';
      }
    });
  }

  // 인증 상태 변경 감지
  supabase.auth.onAuthStateChange((event, session) => {
    if (event === 'SIGNED_IN') {
      showToast('성공적으로 로그인되었습니다!', { type: 'success' });
      updateAuthUI();
    } else if (event === 'SIGNED_OUT') {
      updateAuthUI();
    }
  });

  // 초기 로드 시 인증 상태 확인
  document.addEventListener('DOMContentLoaded', () => {
    updateAuthUI();
  });
</script> 