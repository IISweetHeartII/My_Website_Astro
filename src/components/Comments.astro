---
interface Props {
  postSlug: string;
}

const { postSlug } = Astro.props;
---

<div class="mt-12 border-t border-background-lighter pt-8">
  <h3 class="text-2xl font-bold text-text mb-6">댓글</h3>
  
  <!-- 댓글 작성 폼 -->
  <div id="comment-form-container" class="mb-8">
    <div id="login-required" class="hidden">
      <div class="bg-background-lighter p-4 rounded-lg text-center">
        <p class="text-primary mb-3">댓글을 작성하려면 로그인이 필요합니다.</p>
        <button 
          id="comment-login-btn" 
          class="bg-accent text-text px-6 py-2 rounded-lg font-medium hover:bg-accent-light transition-colors"
        >
          로그인하기
        </button>
      </div>
    </div>
    
    <div id="comment-form" class="hidden">
      <textarea
        id="comment-input"
        placeholder="댓글을 입력하세요..."
        rows="4"
        class="w-full p-4 border border-text-light rounded-lg focus:outline-none focus:ring-2 focus:ring-accent focus:border-accent resize-vertical min-h-[120px] text-text font-['Pretendard']"
      ></textarea>
      <div class="flex justify-between items-center mt-3">
        <div id="user-info" class="text-sm text-light"></div>
        <div class="flex space-x-3">
          <button
            id="cancel-comment-btn"
            class="px-4 py-2 text-text-muted hover:text-primary transition-colors"
          >
            취소
          </button>
          <button
            id="submit-comment"
            class="bg-accent text-text px-6 py-2 rounded-lg font-medium hover:bg-accent-light transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            댓글 작성
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- 댓글 목록 -->
  <div id="comments-container">
    <!-- Loading state -->
    <div id="comments-loading" class="text-center py-8">
      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-accent mx-auto mb-4"></div>
      <div class="text-light">댓글을 불러오는 중...</div>
    </div>
    
    <div id="comments-empty" class="text-center py-8 hidden">
      <div class="text-light">아직 댓글이 없습니다. 첫 번째 댓글을 작성해보세요!</div>
    </div>
    
    <div id="comments-list" class="space-y-4 hidden">
      <!-- 댓글들이 여기에 동적으로 추가됩니다 -->
    </div>
  </div>
</div>

<script define:vars={{ postSlug }}>
  import { getComments, addComment, getUser, signInWithGoogle } from '../lib/supabase';

  const loginRequiredDiv = document.getElementById('login-required');
  const commentForm = document.getElementById('comment-form');
  const commentLoginBtn = document.getElementById('comment-login-btn');
  const commentInput = document.getElementById('comment-input');
  const userInfo = document.getElementById('user-info');
  const cancelCommentBtn = document.getElementById('cancel-comment-btn');
  const submitCommentBtn = document.getElementById('submit-comment');
  const commentsLoading = document.getElementById('comments-loading');
  const commentsEmpty = document.getElementById('comments-empty');
  const commentsContainer = document.getElementById('comments-container');

  let currentUser = null;

  // 사용자 인증 상태 확인 및 폼 표시
  async function updateCommentForm() {
    try {
      currentUser = await getUser();
      
      if (currentUser) {
        // 로그인된 상태
        if (loginRequiredDiv) loginRequiredDiv.classList.add('hidden');
        if (commentForm) commentForm.classList.remove('hidden');
        if (userInfo) userInfo.textContent = `${currentUser.email}로 댓글 작성`;
      } else {
        // 로그아웃된 상태
        if (commentForm) commentForm.classList.add('hidden');
        if (loginRequiredDiv) loginRequiredDiv.classList.remove('hidden');
      }
    } catch (error) {
      console.error('사용자 확인 오류:', error);
      if (commentForm) commentForm.classList.add('hidden');
      if (loginRequiredDiv) loginRequiredDiv.classList.remove('hidden');
    }
  }

  // 댓글 목록 로드
  async function loadComments() {
    try {
      if (commentsLoading) commentsLoading.style.display = 'block';
      if (commentsEmpty) commentsEmpty.classList.add('hidden');
      
      const { data: comments, error } = await getComments(postSlug);
      
      if (commentsLoading) commentsLoading.style.display = 'none';
      
      if (error) {
        console.error('댓글 로드 오류:', error);
        return;
      }

      if (!comments || comments.length === 0) {
        if (commentsEmpty) commentsEmpty.classList.remove('hidden');
        return;
      }

      // 댓글 표시
      if (commentsContainer) {
        commentsContainer.innerHTML = comments.map(comment => `
          <div class="bg-background-light p-4 rounded-lg border border-background-lighter">
            <div class="flex justify-between items-start mb-2">
              <div class="font-medium text-primary">${comment.profiles?.email || '익명'}</div>
              <div class="text-sm text-text-muted">${new Date(comment.created_at).toLocaleDateString('ko-KR', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
              })}</div>
            </div>
            <div class="text-text whitespace-pre-wrap">${comment.content}</div>
          </div>
        `).join('');
      }
    } catch (error) {
      console.error('댓글 로드 오류:', error);
      if (commentsLoading) commentsLoading.style.display = 'none';
    }
  }

  // 댓글 작성
  async function submitComment() {
    const content = commentInput?.value?.trim();
    
    if (!content) {
      alert('댓글 내용을 입력해주세요.');
      return;
    }

    if (!currentUser) {
      alert('로그인이 필요합니다.');
      return;
    }

    try {
      if (submitCommentBtn) submitCommentBtn.disabled = true;
      
      const { error } = await addComment(postSlug, content, currentUser.id);
      
      if (error) {
        console.error('댓글 작성 오류:', error);
        alert('댓글 작성에 실패했습니다. 다시 시도해주세요.');
        return;
      }

      // 댓글 작성 성공
      if (commentInput) commentInput.value = '';
      await loadComments(); // 댓글 목록 새로고침
      
    } catch (error) {
      console.error('댓글 작성 오류:', error);
      alert('댓글 작성에 실패했습니다. 다시 시도해주세요.');
    } finally {
      if (submitCommentBtn) submitCommentBtn.disabled = false;
    }
  }

  // 이벤트 리스너들
  if (commentLoginBtn) {
    commentLoginBtn.addEventListener('click', async () => {
      try {
        const { error } = await signInWithGoogle();
        if (error) {
          console.error('로그인 오류:', error);
          alert('로그인에 실패했습니다. 다시 시도해주세요.');
        }
      } catch (error) {
        console.error('로그인 오류:', error);
        alert('로그인에 실패했습니다. 다시 시도해주세요.');
      }
    });
  }

  if (cancelCommentBtn) {
    cancelCommentBtn.addEventListener('click', () => {
      if (commentInput) commentInput.value = '';
    });
  }

  if (submitCommentBtn) {
    submitCommentBtn.addEventListener('click', submitComment);
  }

  if (commentInput) {
    commentInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
        submitComment();
      }
    });
  }

  // 초기 로드
  updateCommentForm();
  loadComments();

  // 인증 상태 변경 감지
  if (typeof window !== 'undefined') {
    window.addEventListener('supabase-auth-change', () => {
      updateCommentForm();
    });
  }
</script> 