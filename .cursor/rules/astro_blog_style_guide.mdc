---
description: Next.js(App Router) + Tailwind v4 블로그 스타일/개발 가이드라인
alwaysApply: true
---

**색상 팔레트 (Tailwind 기반):**

**주요 브랜드 색상 (Primary):**

- `primary`: `#485E8E` (블루그레이) - 헤더, 메인 브랜드
- `primary-light`: `#8590B3` (뮤트퍼플) - 서브 컬러
- `primary-lighter`: `#E5F0FF` (밝은 블루) - 배경용

**강조 색상 (Accent):**

- `accent`: `#00FF6A` (형광 연두) - CTA, 중요 요소
- `accent-light`: `#66FF9A` (밝은 형광 연두) - 호버 효과
- `accent-coral`: `#FF6B6B` (코랄) - 호버, 경고
- `accent-mint`: `#2DD4BF` (민트) - 성공, 보조 강조

**배경 색상 (Background):**

- `background`: `#FFFFFF` (메인 배경)
- `background-light`: `#F9FAFB` (서브 배경)
- `background-lighter`: `#E5F0FF` (밝은 블루 배경)

**텍스트 색상 (Text):**

- `text`: `#1F2937` (기본 텍스트)
- `text-light`: `#6B7280` (보조 텍스트)
- `text-lighter`: `#9CA3AF` (연한 텍스트)
- `text-muted`: `#9CA3AF` (뮤트 텍스트)

**상태 색상:**

- 성공: `#10B981` / 연한 성공: `#D1FAE5`
- 오류: `#EF4444` / 연한 오류: `#FEE2E2`
- 경고: `#F59E0B` / 연한 경고: `#FEF3C7`
- 정보: `#3B82F6` / 연한 정보: `#DBEAFE`

**폰트 시스템 (Pretendard):**

- **기본 폰트**: Pretendard (한글 최적화)
- **폰트 가중치**: 300 (Light), 400 (Regular), 600 (SemiBold), 700 (Bold)
- **로드 순서**: Regular → Bold → Light (성능 최적화)

**사용 예시:**

```css
/* CSS에서 직접 사용 */
@font-face {
  font-family: "Pretendard";
  font-weight: 400;
  font-style: normal;
  font-display: swap;
  src: url("/fonts/woff2-subset/Pretendard-Regular.subset.woff2") format("woff2");
  unicode-range: U+AC00-D7AF, U+1100-11FF, U+3130-318F, U+A960-A97F, U+D7B0-D7FF;
}
```

```html
<!-- Tailwind 클래스 사용 -->
<h1 class="text-primary font-bold">메인 제목</h1>
<h2 class="text-accent font-semibold">강조 제목</h2>
<p class="text-text-light">본문 텍스트</p>
<button class="bg-accent text-background hover:bg-accent-coral">버튼</button>
```

**개발 언어 및 프레임워크:**

- **프레임워크**: Next.js (React 기반 풀스택 프레임워크, SSR/SSG/ISR 지원, 성능 및 SEO 최적화)
- **주요 언어**: TypeScript (타입 안정성 확보)
- **스타일링**: Tailwind CSS (위 색상 시스템 사용 필수)
- **폰트**: Pretendard (한글 웹폰트 최적화)

**Next.js 컴포넌트 및 파일 구조:**

- **컴포넌트**: 모든 컴포넌트는 React 컴포넌트(`.tsx`)로 작성합니다.
- **페이지**: `app/` 디렉토리 내에 라우트별로 폴더를 생성하고 `page.tsx` 파일을 사용합니다. (App Router 방식)
- **API**: 서버 로직은 `app/api/` 디렉토리 내 `route.ts` 또는 `route.tsx` 파일에 작성합니다.
- **서버 컴포넌트 활용**: 기본적으로 모든 컴포넌트는 서버 컴포넌트입니다. 클라이언트 측 상호작용(예: `onClick`, `useState`)이 필요한 경우에만 파일 상단에 `"use client";` 지시문을 추가하여 클라이언트 컴포넌트로 전환합니다.

**색상 사용 가이드라인:**

1. **일관성**: 반드시 `tailwind.config.mjs`에 정의된 색상만 사용
2. **접근성**: 텍스트와 배경 간 충분한 대비 유지 (WCAG AA 기준 준수)
3. **브랜딩**: Primary 색상군은 브랜드 아이덴티티를 나타내는 핵심 요소에 사용합니다.
4. **강조**: Accent 색상군은 사용자의 행동을 유도하는 CTA(Call-to-Action) 버튼 및 중요 알림 등에 사용합니다.
5. **계층구조**: Text 색상군(text, text-light, text-lighter)을 사용하여 정보의 중요도와 위계를 명확히 표현합니다.

**광고 통합:**

**콘텐츠 작성(MDX):**

- 프론트매터: `title, subtitle, description, created_date, updated_date, featured_image, featured_image_alt, tags, slug`
- 이미지: `/images/...` 절대 경로, `featured_image_alt` 필수
- 제목 계층: 문서 내 H1 단 1회, 이후 H2/H3
- 코드/다이어그램: fenced code블록, Mermaid는 가능 시 별도 컴포넌트로

**피드/크롤러:**

- RSS: `/rss.xml` 라우트 생성됨
- Sitemap: `/sitemap.xml` 라우트 생성됨
- Robots: `/robots.txt` 라우트 생성됨

- Google AdSense 사용
- 사용자 경험을 해치지 않는 배치
- 브랜드 색상과 조화로운 광고 스타일링
